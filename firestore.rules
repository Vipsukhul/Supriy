rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access control for user profiles.  A user can only
     * read and write their own data. Listing all users is disallowed.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their own profile.
     * @allow (get, update, delete) User with UID 'user_abc' can read/write their profile.
     * @deny (create, get, update, delete) User with UID 'user_xyz' cannot access user 'user_abc' profile.
     * @deny (list) No one can list all users.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages access control for customer data.
     * Customer data is publicly readable but requires authentication for create,
     * update, and delete operations.
     * @path /customers/{customerId}
     * @allow (get, list) Any user can read customer data.
     * @allow (create, update, delete) Authenticated users can create, update and delete customer data.
     * @deny (create, update, delete) Unauthenticated users cannot modify customer data.
     * @principle Allows public read access with owner-only writes.
     */
    match /customers/{customerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages access control for financial records.
     * Financial records are publicly readable but require authentication for create,
     * update, and delete operations.
     * @path /financialRecords/{recordId}
     * @allow (get, list) Any user can read financial record data.
     * @allow (create, update, delete) Authenticated users can create, update and delete financial record data.
     * @deny (create, update, delete) Unauthenticated users cannot modify financial record data.
     * @principle Allows public read access with owner-only writes.
     */
    match /financialRecords/{recordId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Protects the counter document for generating sequential user IDs.
     * Only authenticated users can create, update, or delete the counter.
     * @path /counters/users
     * @allow (get) Any user can read the counter.
     * @allow (create, update, delete) Authenticated users can modify the counter.
     * @deny (create, update, delete) Unauthenticated users cannot modify the counter.
     * @principle Requires authentication for counter management.
     */
    match /counters/users {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}