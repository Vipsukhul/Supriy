/**
 * @file Firestore Security Rules for DebtFlow Application
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and provides role based access to all other collections.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores individual user profiles, accessible only to the owning user.
 * - `/customers/{customerId}`: Stores customer information, accessible to all authenticated users.
 * - `/financialRecords/{recordId}`: Stores financial records, accessible to all authenticated users.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Listing users is not allowed.
 * - Customers and financial records are readable by all authenticated users, but writes are open for prototyping.
 *
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profile data.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) Authenticated user can only access their own profile data.
     * @deny (create) An unauthenticated user cannot create a profile.
     * @deny (get, update, delete) Authenticated user cannot access another user's profile data.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Manages access to customer data.
     * @path /customers/{customerId}
     * @allow (get, list) Any authenticated user can read customer data.
     * @allow (create, update, delete) Writes are open for prototyping.
     * @deny (create, update, delete) An unauthenticated user cannot write customer data.
     * @principle Allows public read access to customer data for prototyping.
     */
    match /customers/{customerId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn() && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn() && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages access to financial record data.
     * @path /financialRecords/{recordId}
     * @allow (get, list) Any authenticated user can read financial record data.
     * @allow (create, update, delete) Writes are open for prototyping.
     * @deny (create, update, delete) An unauthenticated user cannot write financial record data.
     * @principle Allows public read access to financial record data for prototyping.
     */
    match /financialRecords/{recordId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn() && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn() && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}