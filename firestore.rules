/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user data and allows public read access to customer and financial record data, with owner-only write access.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Only the user can read/write their own profile.
 * - /customers/{customerId}: Stores customer information. Publicly readable, but writeable only by authorized users (currently open, but needs owner field).
 * - /financialRecords/{recordId}: Stores financial records. Publicly readable, but writeable only by authorized users (currently open, but needs owner field).
 *
 * Key Security Decisions:
 * - User listing is explicitly denied for privacy.
 * - Customer and financial records are intended for public read but lack an ownership field in the schema, requiring a TODO for write restrictions.
 * - In this prototyping phase, data shape validation is relaxed to allow rapid iteration. However, authorization-critical fields are validated.
 *
 * Denormalization for Authorization:
 *  -  Currently, no denormalization is used, but the customer and financial records entities will need an `ownerId` or `authorId` field to control write access properly.
 *
 * Structural Segregation:
 *  -  The application uses separate collections for private user data (/users/{userId}) and potentially public customer and financial record data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'lKcNcxsdOEPHXUuXlZuHQBOS3Rk1' can create their own document.
     * @allow (get) User with UID 'lKcNcxsdOEPHXUuXlZuHQBOS3Rk1' can read their own document.
     * @allow (update) User with UID 'lKcNcxsdOEPHXUuXlZuHQBOS3Rk1' can update their own document.
     * @allow (delete) User with UID 'lKcNcxsdOEPHXUuXlZuHQBOS3Rk1' can delete their own document.
     * @deny (list) Listing all users is not allowed.
     * @deny (create) User with UID 'otherUserId' cannot create a document with ID 'lKcNcxsdOEPHXUuXlZuHQBOS3Rk1'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the requested user ID matches the authenticated user's ID.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow a user to create their own document if the userId matches their auth.uid.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;

      // Only the owner can read their document.
      allow get: if isOwner(userId);

      // Only the owner can list their own documents.
      allow list: if isOwner(userId);

      // Only the owner can update their own document.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Only the owner can delete their own document.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to customer documents. Currently allows public read access, but requires owner-only write access.
     * @path /customers/{customerId}
     * @allow (get, list) Any user can read customer documents.
     * @deny (create, update, delete) No one can currently write. Requires an 'ownerId' field to implement owner-only writes.
     * @principle Public read, owner-only writes (currently incomplete due to missing schema information).
     */
    match /customers/{customerId} {
      // Allow anyone to read customer data.
      allow get, list: if true;

      // CRITICAL: Cannot implement owner-only writes. The 'Customer' entity is missing an 'ownerId' or 'authorId' field.
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to financial record documents. Currently allows public read access, but requires owner-only write access.
     * @path /financialRecords/{recordId}
     * @allow (get, list) Any user can read financial record documents.
     * @deny (create, update, delete) No one can currently write. Requires an 'ownerId' field to implement owner-only writes.
     * @principle Public read, owner-only writes (currently incomplete due to missing schema information).
     */
    match /financialRecords/{recordId} {
      // Allow anyone to read financial record data.
      allow get, list: if true;

      // CRITICAL: Cannot implement owner-only writes. The 'FinancialRecord' entity is missing an 'ownerId' or 'authorId' field.
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}