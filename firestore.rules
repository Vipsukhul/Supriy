/**
 * @fileOverview Firestore Security Rules for DebtFlow application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles,
 * while allowing open read access to customer and financial record data.
 * Write access to these records is currently open but marked for future access controls.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the
 *   authenticated user with matching UID.
 * - /customers/{customerId}: Stores customer data. Read access is public.
 *   Write access is currently open but MUST be secured in the future.
 * - /financialRecords/{recordId}: Stores monthly financial records. Read access
 *   is public. Write access is currently open but MUST be secured in the future.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent enumeration.
 * - Customer and financial record writes are currently open, but a TODO is in
 *   place to enforce access controls, likely based on user roles or regional
 *   permissions.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own profile at /users/user_abc.
     * @allow (get, update, delete) - User with UID 'user_abc' can read, update, or delete their own profile at /users/user_abc.
     * @deny (create) - User with UID 'user_abc' cannot create a profile at /users/user_xyz.
     * @deny (get, update, delete) - User with UID 'user_abc' cannot read, update, or delete the profile of user 'user_xyz' at /users/user_xyz.
     * @deny (list) - No user can list all user profiles.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Verify the user is signed in
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to customer data. Read access is public. Write access is currently open but MUST be secured in the future.
     * @path /customers/{customerId}
     * @allow (get, list) - Any user can read customer data.
     * @allow (create, update, delete) - Currently open, but MUST be secured.
     * @deny N/A
     * @principle Read access is public; write access MUST be secured in the future.
     */
    match /customers/{customerId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add access controls based on roles or ownership
    }

    /**
     * @description Controls access to financial record data. Read access is public. Write access is currently open but MUST be secured in the future.
     * @path /financialRecords/{recordId}
     * @allow (get, list) - Any user can read financial record data.
     * @allow (create, update, delete) - Currently open, but MUST be secured.
     * @deny N/A
     * @principle Read access is public; write access MUST be secured in the future.
     */
    match /financialRecords/{recordId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add access controls based on roles or ownership
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}