/**
 * @fileoverview Firestore Security Rules for DebtFlow application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles.
 * Customers and financial records will allow public reads, but writes will be restricted to specific roles such as admins and engineers.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Access is restricted to the owning user.
 * - /customers/{customerId}: Stores customer information. Public read access, restricted writes (admins/engineers).
 * - /financialRecords/{recordId}: Stores monthly financial records. Public read access, restricted writes (admins/engineers).
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the owning user.
 * - Customer and financial record data is publicly readable but writable only by authorized personnel (e.g., engineers).
 * - Listing of users is disallowed.
 *
 * Denormalization for Authorization:
 *  - FinancialRecord.assignedEngineerId field will be used to simplify engineer role-based access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - If the user is creating their own profile (auth.uid == userId).
     * @allow (get, update, delete) - If the user is the owner of the profile.
     * @deny (create) - If the user is trying to create a profile with a different userId.
     * @deny (get, update, delete) - If the user is not the owner of the profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to customer data.
     * @path /customers/{customerId}
     * @allow (get, list) - Public read access is allowed.
     * @allow (create, update, delete) - Only allowed for authenticated users with a specific role (e.g., "admin").
     * @deny (create, update, delete) - If the user is not authenticated or does not have the required role.
     * @principle Public read access, restricted writes for authorized personnel.
     */
    match /customers/{customerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      // In this prototyping phase, all authenticated users can write.
      // In a real application, role-based checks (e.g., isAdmin()) would be used here.
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to financial record data.
     * @path /financialRecords/{recordId}
     * @allow (get, list) - Public read access is allowed.
     * @allow (create, update, delete) - Only allowed for authenticated users with a specific role (e.g., "engineer" assigned to the record).
     * @deny (create, update, delete) - If the user is not authenticated or does not have the required role.
     * @principle Public read access, restricted writes for authorized personnel.
     */
    match /financialRecords/{recordId} {
      function isSignedIn() {
        return request.auth != null;
      }

       // In this prototyping phase, all authenticated users can write.
      // In a real application, role-based checks (e.g., isEngineer()) would be used here.
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }
  }
}