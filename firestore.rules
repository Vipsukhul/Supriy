/**
 * @fileoverview Firestore Security Rules for DebtFlow application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and open access for customers and financial records.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only by the owning user.
 * - /customers/{customerId}: Stores customer information, publicly readable and writable.
 * - /financialRecords/{recordId}: Stores monthly financial records, publicly readable and writable.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Customer and financial record data is considered public and accessible to all users.
 * - The default security posture for ambiguous relationships is to deny access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) Signed-in user with matching UID can create their own profile.
     * @allow (get, list, update, delete) Signed-in user with matching UID can access and modify their own profile.
     * @deny (create) Signed-in user cannot create a profile for another user.
     * @deny (get, list, update, delete) Signed-in user cannot access or modify another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to customer data.
     * @path /customers/{customerId}
     * @allow (get, list) Any user can read customer data.
     * @allow (create, update, delete) Any user can create, update, or delete customer data.
     * @principle Allows public read and write access to customer information.
     */
    match /customers/{customerId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Controls access to financial records data.
     * @path /financialRecords/{recordId}
     * @allow (get, list) Any user can read financial records data.
     * @allow (create, update, delete) Any user can create, update, or delete financial records data.
     * @principle Allows public read and write access to financial records information.
     */
    match /financialRecords/{recordId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }
  }
}