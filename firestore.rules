/**
 * @fileOverview Firestore Security Rules for DebtFlow application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles,
 * and public read access with owner-only writes for customers and financial records.
 * Counters are writeable only by authenticated users.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the user themselves.
 * - /customers/{customerId}: Stores customer data, publicly readable but only writable by authenticated users.
 * - /financialRecords/{recordId}: Stores financial records, publicly readable but only writable by authenticated users.
 * - /counters/users: Stores a counter for generating sequential user IDs, writable only by authenticated users.
 *
 * Key Security Decisions:
 * - Users cannot list all users (this is a privacy concern).
 * - Public read access is enabled for customer and financial records to facilitate data sharing.
 *
 * Denormalization for Authorization:
 *  There is currently no need to denormalize due to simple ownership and role-based access patterns.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces document ownership for user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) - User 'jIhGynCfJ6SMILQrS30GCfk3gcK2' can access /users/jIhGynCfJ6SMILQrS30GCfk3gcK2.
     * @deny (get, create, update, delete) - User 'jIhGynCfJ6SMILQrS30GCfk3gcK2' cannot access /users/someOtherUserId.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to customer data, but restricts writes to authenticated users.
     * @path /customers/{customerId}
     * @allow (get, list) - Any user can read customer data.
     * @allow (create, update, delete) - Authenticated users can create, update, or delete customer data.
     * @deny (create, update, delete) - Unauthenticated users cannot create, update, or delete customer data.
     * @principle Allows public reads with authenticated writes.
     */
    match /customers/{customerId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to financial records, but restricts writes to authenticated users.
     * @path /financialRecords/{recordId}
     * @allow (get, list) - Any user can read financial records.
     * @allow (create, update, delete) - Authenticated users can create, update, or delete financial records.
     * @deny (create, update, delete) - Unauthenticated users cannot create, update, or delete financial records.
     * @principle Allows public reads with authenticated writes.
     */
    match /financialRecords/{recordId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Restricts write access to the user counter to authenticated users.
     * @path /counters/users
     * @allow (get) - Anyone can read the counter.
     * @allow (create, update) - Authenticated users can create or update the counter.
     * @deny (create, update) - Unauthenticated users cannot create or update the counter.
     * @principle Restricts write access to authenticated users.
     */
    match /counters/users {
      allow get: if true;
      allow create, update: if isSignedIn();
      allow delete: if false;
      allow list: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}