/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles
 * and allows public read access to customer and financial record data.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, secured by owner-only access.
 * - /customers/{customerId}: Stores customer information, publicly readable.
 * - /financialRecords/{recordId}: Stores financial records, publicly readable.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Customer and financial record data is publicly readable but only writeable by a server.
 *   This assumes an external mechanism (e.g., a Cloud Function) is in place to manage this data.
 * - Listing of user documents is disallowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID "user123" can create their profile document.
     * @allow (get, update, delete) User with UID "user123" can get, update, and delete their own profile document.
     * @deny (create, get, update, delete) User with UID "user456" cannot access the profile document of user with UID "user123".
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isExistingOwner(userId) && request.auth.uid == userId;
      allow delete: if isExistingOwner(userId) && request.auth.uid == userId;
    }

    /**
     * @description Controls access to customer documents. Allows public read access, but restricts writes.
     * @path /customers/{customerId}
     * @allow (get, list) Any user (or no user) can read customer data.
     * @deny (create, update, delete) No user can create, update, or delete customer data through the client.
     * @principle Allows public read access for customer data, but restricts writes.
     */
    match /customers/{customerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to financial record documents. Allows public read access, but restricts writes.
     * @path /financialRecords/{recordId}
     * @allow (get, list) Any user (or no user) can read financial record data.
     * @deny (create, update, delete) No user can create, update, or delete financial record data through the client.
     * @principle Allows public read access for financial record data, but restricts writes.
     */
    match /financialRecords/{recordId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}