/**
 * @file Firestore Security Rules for DebtFlow application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, where each user can only access their own data stored under their UID. This is achieved through path-based authorization.
 *
 * Data Structure:
 * All user data is stored under the `/users/{userId}` path, where `{userId}` corresponds to the Firebase Authentication UID of the user. This direct mapping simplifies ownership checks.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent enumeration of user accounts.
 * - All write operations are strictly controlled by the `isOwner(userId)` function, ensuring that only the authenticated user can modify their own data.
 * - Data shape is not strictly enforced in this prototyping phase, allowing for flexible schema evolution, but authorization-critical fields are validated.
 *
 * Denormalization for Authorization:
 * The Firestore structure is designed to directly map user data to their UID, avoiding the need for complex queries or lookups during authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the /users/{userId} collection, ensuring users can only access their own data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own document at /users/user_abc, setting their 'id' field to 'user_abc'.
     * @allow (get) - User with UID 'user_abc' can read their own document at /users/user_abc.
     * @allow (update) - User with UID 'user_abc' can update their own document at /users/user_abc.
     * @allow (delete) - User with UID 'user_abc' can delete their own document at /users/user_abc.
     * @deny (create) - User with UID 'user_def' cannot create a document at /users/user_abc.
     * @deny (get) - User with UID 'user_def' cannot read the document at /users/user_abc.
     * @deny (update) - User with UID 'user_def' cannot update the document at /users/user_abc.
     * @deny (delete) - User with UID 'user_def' cannot delete the document at /users/user_abc.
     * @principle Enforces document ownership for all read and write operations.
     */
    match /users/{userId} {
      // Helper function to check if the request is from the owner.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the request is from the existing owner (used for update/delete).
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted.

      // Allow the user to create their own document, but enforce that the 'id' field matches their UID.
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // For updates, ensure the user is the owner and that the 'id' field (ownership) is immutable.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow the owner to delete their document.
      allow delete: if isExistingOwner(userId);
    }
  }
}