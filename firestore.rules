/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user data and allows open read access to customers and financial records.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Access is restricted to the user themselves.
 * - /customers/{customerId}: Stores customer information.  Currently allows public read access.
 * - /financialRecords/{recordId}: Stores monthly financial records. Currently allows public read access.
 *
 * Key Security Decisions:
 * - User listing is disallowed. This prevents unauthorized enumeration of user accounts.
 * - Public read access is granted to the customers and financialRecords collections for prototyping. In a production environment, access to this data would likely be restricted based on user roles and permissions.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user documents. Only the authenticated user can read or write their own document.
     * @path /users/{userId}
     * @allow (create) User with UID lKcNcxsdOEPHXUuXlZuHQBOS3Rk1 can create their own document if request.auth.uid == userId.
     * @deny (create) User with UID lKcNcxsdOEPHXUuXlZuHQBOS3Rk1 cannot create a document with a different userId.
     * @allow (get) User with UID lKcNcxsdOEPHXUuXlZuHQBOS3Rk1 can read their own document.
     * @deny (get) User with UID lKcNcxsdOEPHXUuXlZuHQBOS3Rk1 cannot read another user's document.
     * @allow (update) User with UID lKcNcxsdOEPHXUuXlZuHQBOS3Rk1 can update their own document.
     * @deny (update) User with UID lKcNcxsdOEPHXUuXlZuHQBOS3Rk1 cannot update another user's document.
     * @allow (delete) User with UID lKcNcxsdOEPHXUuXlZuHQBOS3Rk1 can delete their own document.
     * @deny (delete) User with UID lKcNcxsdOEPHXUuXlZuHQBOS3Rk1 cannot delete another user's document.
     * @deny (list) Listing users is not allowed.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Allows public read access to customer documents, but restricts write access.
     * @path /customers/{customerId}
     * @allow (get) Any user can read customer documents.
     * @allow (list) Any user can list customer documents.
     * @deny (create) No user can create customer documents through the client.
     * @deny (update) No user can update customer documents through the client.
     * @deny (delete) No user can delete customer documents through the client.
     * @principle Public read, owner-only write (currently no owner).
     */
    match /customers/{customerId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation if needed.
    }

    /**
     * @description Allows public read access to financial record documents, but restricts write access.
     * @path /financialRecords/{recordId}
     * @allow (get) Any user can read financial record documents.
     * @allow (list) Any user can list financial record documents.
     * @deny (create) No user can create financial record documents through the client.
     * @deny (update) No user can update financial record documents through the client.
     * @deny (delete) No user can delete financial record documents through the client.
     * @principle Public read, owner-only write (currently no owner).
     */
    match /financialRecords/{recordId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation if needed.
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}