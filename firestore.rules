/**
 * @fileoverview Firestore Security Rules for DebtFlow application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles,
 * allows public read access to customer data, and restricts access to financial records based on assigned engineer.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the owner.
 * - /customers/{customerId}: Stores customer data, publicly readable.
 * - /financialRecords/{recordId}: Stores financial records, write access restricted to the assigned engineer.
 *
 * Key Security Decisions:
 * - Users cannot list all user accounts (potential privacy issue).
 * - Customer data is public for all reads.
 * - Financial records write operations are limited to the engineer assigned.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with UID lKcNcxsdOEPHXUuXlZuHQBOS3Rk1 can create their own profile.
     * @allow (get) User with UID lKcNcxsdOEPHXUuXlZuHQBOS3Rk1 can read their own profile.
     * @allow (update) User with UID lKcNcxsdOEPHXUuXlZuHQBOS3Rk1 can update their own profile.
     * @allow (delete) User with UID lKcNcxsdOEPHXUuXlZuHQBOS3Rk1 can delete their own profile.
     * @deny (create) User with UID otherUserId cannot create a profile for userId.
     * @deny (get) User with UID otherUserId cannot read the profile of userId.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to customer data.
     * @path /customers/{customerId}
     * @allow (get) Any user can read customer data.
     * @allow (list) Any user can list customer data.
     * @deny (create) No one can create customer documents.
     * @deny (update) No one can update customer documents.
     * @deny (delete) No one can delete customer documents.
     * @principle Allows public read access to customer data.
     */
    match /customers/{customerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages access to financial records.
     * @path /financialRecords/{recordId}
     * @allow (get) Any user can read financial records.
     * @allow (list) Any user can list financial records.
     * @deny (create) No one can create financial records.
     * @deny (update) Only the assigned engineer can update financial records.
     * @deny (delete) No one can delete financial records.
     * @principle Restricts write access to financial records to assigned engineer.
     */
    match /financialRecords/{recordId} {
        allow get, list: if true;
        allow create: if false;
        allow update: if isAssignedEngineer(resource.data.assignedEngineerId);
        allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isAssignedEngineer(assignedEngineerId) {
        return isSignedIn() && request.auth.uid == assignedEngineerId;
    }
  }
}