/**
 * @fileoverview Firestore Security Rules for DebtFlow application.
 *
 * Core Philosophy:
 * This ruleset enforces a mixed security model. User data is strictly
 * controlled by the owning user. Customer and FinancialRecord data are
 * publicly readable to allow for open data access, but writes are restricted to authorized users.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.  Access is restricted to the owning user.
 * - /customers/{customerId}: Stores customer information. Publicly readable, writes restricted.
 * - /financialRecords/{recordId}: Stores financial records. Publicly readable, writes restricted.
 *
 * Key Security Decisions:
 * - Users are not allowed to list all user accounts (to protect privacy).
 * - Public read access is granted to the /customers and /financialRecords collections to enable open data access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) User with matching UID can read, update, or delete their own profile.
     * @deny (list) Prevents listing all user documents.
     * @deny (create, update, delete) Non-matching UID cannot create, update, or delete a user profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to customer data.
     * @path /customers/{customerId}
     * @allow (get, list) Any user can read customer data.
     * @deny (create, update, delete) Only authorized users can create, update, or delete customer data (currently disabled, TODO).
     * @principle Allows public read access while restricting writes.
     */
    match /customers/{customerId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to financial record data.
     * @path /financialRecords/{recordId}
     * @allow (get, list) Any user can read financial record data.
     * @deny (create, update, delete) Only authorized users can create, update, or delete financial record data (currently disabled, TODO).
     * @principle Allows public read access while restricting writes.
     */
    match /financialRecords/{recordId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}