/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user data,
 *              allows public read access to customer data, and restricts financial
 *              record modifications to authenticated users.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Access is restricted to the
 *   user themselves (ownership model).
 * - /customers/{customerId}: Stores customer information. Read access is public,
 *   but writes are restricted to authenticated users.
 * - /financialRecords/{recordId}: Stores financial records. Write access is
 *   restricted to authenticated users.
 *
 * Key Security Decisions:
 * - Users can only read and write their own data under /users/{userId}.
 * - Listing of users is disallowed.
 * - Customer data is publicly readable, but only authenticated users can create,
 *   update, or delete customer records.
 * - Financial records are only modifiable by authenticated users.
 *
 * Denormalization for Authorization:
 *   - User data is stored under /users/{userId}, making ownership checks simple.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with UID "lKcNcxsdOEPHXUuXlZuHQBOS3Rk1" can create their own profile.
     * @allow (get, update, delete) User with UID "lKcNcxsdOEPHXUuXlZuHQBOS3Rk1" can read, update, and delete their profile.
     * @deny (create) User with UID "attackerUid" cannot create a profile for userId "lKcNcxsdOEPHXUuXlZuHQBOS3Rk1".
     * @deny (get, update, delete) User with UID "attackerUid" cannot read, update, or delete the profile of userId "lKcNcxsdOEPHXUuXlZuHQBOS3Rk1".
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Verify that the document ID matches the authenticated user's UID.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // For update/delete, also verify that the document exists.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to customer data.  Anyone can read customer
     *              data. Only authenticated users can create, update, or delete
     *              customer records.
     * @path /customers/{customerId}
     * @allow (get, list) Any user can read customer data.
     * @allow (create) Authenticated user can create customer data.
     * @allow (update, delete) Authenticated user can update/delete customer data.
     * @deny (create, update, delete) Unauthenticated user cannot create/update/delete customer data.
     * @principle Public read, authenticated writes.
     */
    match /customers/{customerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to financial record data.
     *              Only authenticated users can create, update, or delete
     *              financial record data.  Read access is not explicitly granted,
     *              so it defaults to denied.
     * @path /financialRecords/{recordId}
     * @allow (create) Authenticated user can create financial record data.
     * @allow (update, delete) Authenticated user can update/delete financial record data.
     * @deny (create, update, delete) Unauthenticated user cannot create/update/delete financial record data.
     * @principle Authenticated writes only.
     */
    match /financialRecords/{recordId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}