rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    /**
     * @description This ruleset enforces a strict user-ownership model for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile with matching UID.
     * @allow (get, update, delete) - Authenticated user can only access and modify their own profile.
     * @deny (create) - Creating a user profile with a mismatched UID.
     * @deny (list) - Listing all user profiles is forbidden.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow a user to create their own profile if the UID matches.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;

      // Allow read access to a user's own profile.
      allow get: if isOwner(userId);

      // Only the owner can list their own "profile" document, but this is effectively disabled since the parent collection `/users` is not listable.
      allow list: if false;

      // Allow the user to update their own profile. Enforce immutability of the userId field.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow the user to delete their own profile.
      allow delete: if isExistingOwner(userId);
    }
  }
}