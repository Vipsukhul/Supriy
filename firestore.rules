/**
 * @file Firestore Security Rules
 * @core-philosophy This ruleset enforces a strict user-ownership model for user profiles,
 *  allows public read access to customer and financial records, and restricts write access
 *  to customer and financial records.
 * @data-structure
 *  - /users/{userId}: Stores individual user profiles.  Access is restricted to the owning user.
 *  - /customers/{customerId}: Stores customer data. Public read, restricted write.
 *  - /financialRecords/{recordId}: Stores financial records. Public read, restricted write.
 * @key-security-decisions
 *  - Users can only read/write their own profile data.
 *  - Customer and Financial records are publicly readable but have restricted writes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth UID.
     * @allow (get, list, update, delete) - A user can only access their own profile data.
     * @deny (create) - A user cannot create a profile with an ID that doesn't match their auth UID.
     * @deny (get, list, update, delete) - A user cannot access another user's profile data.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to customer documents.
     * @path /customers/{customerId}
     * @allow (get, list) - Any user can read customer data.
     * @allow (create, update, delete) - No user can create, update, or delete customer data.
     * @deny (create, update, delete) - All write operations are denied.
     * @principle Public read, restricted write.
     */
    match /customers/{customerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to financial record documents.
     * @path /financialRecords/{recordId}
     * @allow (get, list) - Any user can read financial record data.
     * @allow (create, update, delete) - No user can create, update, or delete financial record data.
     * @deny (create, update, delete) - All write operations are denied.
     * @principle Public read, restricted write.
     */
    match /financialRecords/{recordId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}