/**
 * @fileOverview Firestore Security Rules for DebtFlow application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model with strict ownership for user profiles.
 * High-level roles such as 'admin' and 'Country Manager' have elevated privileges, while other roles
 * are restricted to more limited data access.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible primarily to the user themselves and admins.
 * - /customers/{customerId}: Stores customer information. Access is generally open for reads, but writes are restricted.
 * - /financialRecords/{recordId}: Stores financial records, including invoice details. Access control depends on user roles and potentially assigned ownership.
 * - /counters/users: Stores a counter document for generating user IDs. Only admins have write access.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent unauthorized data scraping.
 * - The `counters` collection is protected to prevent unauthorized modification of ID generation logic.
 * - Data validation focuses on relational integrity and authorization fields, rather than strict schema enforcement, to allow for prototyping flexibility.
 *
 * Denormalization for Authorization:
 *  - The role field within the `/users/{userId}` document is used directly for role-based access control, avoiding the need for separate role lookup queries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their own profile.
     * @allow (get, update, delete) User with matching UID can access and modify their own profile. Admin users can read and modify any user profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (list) User listing is not permitted.
     * @principle Enforces user ownership and role-based access for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      function isCountryManager() {
        return isSignedIn() && request.auth.token.role == 'Country Manager';
      }

      allow get: if isSignedIn() && (isOwner(userId) || isAdmin() || isCountryManager());
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin() || isCountryManager()) && resource.data.uid == userId;
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin() || isCountryManager()) && resource.data.uid == userId;
    }

    /**
     * @description Controls access to customer data.
     * @path /customers/{customerId}
     * @allow (get, list) Any authenticated user can read customer data.
     * @deny (create, update, delete) Only admin users can create, update, or delete customer data.
     * @principle Restricts write access to customer data to admin roles.
     */
    match /customers/{customerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to financial record data.
     * @path /financialRecords/{recordId}
     * @allow (get, list) Any authenticated user can read financial record data.
     * @deny (create, update, delete) Only admin users can create, update, or delete financial record data.
     * @principle Restricts write access to financial record data to admin roles.
     */
    match /financialRecords/{recordId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to the user ID counter.
     * @path /counters/users
     * @allow (get) Any authenticated user can read the counter.
     * @deny (create, update, delete) Only admin users can update the counter.
     * @principle Restricts write access to the counter to admin roles to prevent ID conflicts.
     */
    match /counters/users {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      allow get: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}