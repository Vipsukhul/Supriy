/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles,
 * grants public read access to customer and financial record data,
 * and restricts modification of customers and financial records to authenticated users.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.  Access is restricted to the owning user.
 * - /customers/{customerId}: Stores customer information. Publicly readable, writes are restricted.
 * - /financialRecords/{recordId}: Stores financial records. Publicly readable, writes are restricted.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible/modifiable by the owning user.
 * - Listing of users is disallowed.
 * - Customers and Financial Records are readable by everyone but only modified by authenticated users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access control for user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) - Authenticated user can only access their own profile data.
     * @deny (create) - If the user tries to create a profile with an ID that doesn't match their auth UID.
     * @deny (get, update, delete) - If a user tries to access another user's profile.
     * @deny (list) - Listing users is not allowed.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access control for customer documents.
     * @path /customers/{customerId}
     * @allow (get, list) - Any user can read customer data.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete customer data.
     * @deny (create, update, delete) - If the user is not authenticated.
     * @principle Allows public read access but restricts writes to authenticated users.
     */
    match /customers/{customerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages access control for financial record documents.
     * @path /financialRecords/{recordId}
     * @allow (get, list) - Any user can read financial record data.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete financial record data.
     * @deny (create, update, delete) - If the user is not authenticated.
     * @principle Allows public read access but restricts writes to authenticated users.
     */
    match /financialRecords/{recordId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}