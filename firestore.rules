/**
 * @file Firestore Security Rules for DebtFlow Application
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model, where each user can only access their own data.
 * @data_structure User data is stored under `/users/{userId}`, where `{userId}` is the Firebase Authentication UID.
 * @key_security_decisions
 *   - Users can only create, read, update, and delete their own user document.
 *   - Listing all users is disallowed.
 * @denormalization_for_authorization N/A
 * @structural_segregation N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user documents. Each user can only access their own document.
     * @path /users/{userId}
     * @allow (create) - User 'user_abc' can create their own document if request.auth.uid == 'user_abc'.
     * @allow (get) - User 'user_abc' can read their own document.
     * @allow (update) - User 'user_abc' can update their own document.
     * @allow (delete) - User 'user_abc' can delete their own document.
     * @deny (create) - User 'user_xyz' cannot create a document with ID 'user_abc'.
     * @deny (get) - User 'user_xyz' cannot read document 'user_abc'.
     * @deny (update) - User 'user_xyz' cannot update document 'user_abc'.
     * @deny (delete) - User 'user_xyz' cannot delete document 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // isSignedIn() checks if the request is authenticated
      function isSignedIn() {
        return request.auth != null;
      }

      // isOwner(userId) checks if the request is made by the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // isExistingOwner(userId) checks if the request is made by the owner of an existing document
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}