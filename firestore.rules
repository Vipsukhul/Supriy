/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and allows open reads for customers and financial records.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Only the authenticated user can read/write their own profile.
 * - /customers/{customerId}: Stores customer information.  Publicly readable.
 * - /financialRecords/{recordId}: Stores monthly financial records. Publicly readable.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the owning user.
 * - Customer and financial records are publicly readable.
 *
 * Denormalization for Authorization:
 * - User documents are secured based on their document ID matching the authenticated user's UID, avoiding the need for additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with UID 'user123' can create their profile at /users/user123.
     * @allow (get, update, delete) - Authenticated user with UID 'user123' can read, update, or delete their profile at /users/user123.
     * @deny (create) - Authenticated user with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get, update, delete) - Authenticated user with UID 'user456' cannot read, update, or delete the profile at /users/user123.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing of all users
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to customer records.
     * @path /customers/{customerId}
     * @allow (get, list) - Any user, authenticated or not, can read customer data.
     * @deny (create, update, delete) - No one can create, update, or delete customer data.
     * @principle Allows public read access, restricts write access.
     */
    match /customers/{customerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to financial records.
     * @path /financialRecords/{recordId}
     * @allow (get, list) - Any user, authenticated or not, can read financial records.
     * @deny (create, update, delete) - No one can create, update, or delete financial records.
     * @principle Allows public read access, restricts write access.
     */
    match /financialRecords/{recordId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}