/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and allows broad read access to customer and financial record data.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, with 'userId' matching the Firebase auth UID.
 * - /customers/{customerId}: Stores customer information.  These are globally readable.
 * - /financialRecords/{recordId}: Stores financial records, accessible to any authenticated user.
 * - /counters/users: Stores a counter for sequential user IDs.
 *
 * Key Security Decisions:
 * - User profiles are strictly owned; only the authenticated user can read/write their profile.
 * - Customer and financial record data are globally readable but not writable without authentication (Public Read with Authenticated Owner-Only Writes).
 * - Listing of user documents is disallowed to prevent data leakage.
 * - Counters are read and written by anyone authenticated.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.  Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile at /users/user_abc
     * @allow (get, update, delete) User with UID 'user_abc' can read/write their profile at /users/user_abc
     * @deny (create, get, update, delete) User with UID 'user_xyz' cannot read/write the profile at /users/user_abc
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && resource.data.uid == userId;
      allow delete: if isOwner(userId) && resource.data.uid == userId;
    }

    /**
     * @description Controls access to customer documents.  These are globally readable, but only authenticated users can create, update, or delete them.
     * @path /customers/{customerId}
     * @allow (get, list) Any user can read customer data.
     * @allow (create) Any authenticated user can create customer data.
     * @deny (create) Non-authenticated user cannot create customer data.
     * @allow (update, delete) Only authenticated users can update or delete customer data.
     * @deny (update, delete) Non-authenticated users cannot update or delete customer data.
     * @principle Public Read with Authenticated Owner-Only Writes.
     */
    match /customers/{customerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to financial record documents.  These are globally readable, but only authenticated users can create, update, or delete them.
     * @path /financialRecords/{recordId}
     * @allow (get, list) Any user can read financial record data.
     * @allow (create) Any authenticated user can create financial record data.
     * @deny (create) Non-authenticated user cannot create financial record data.
     * @allow (update, delete) Only authenticated users can update or delete financial record data.
     * @deny (update, delete) Non-authenticated users cannot update or delete financial record data.
     * @principle Public Read with Authenticated Owner-Only Writes.
     */
    match /financialRecords/{recordId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to the users counter document.  These are readable and writable to authenticated users.
     * @path /counters/users
     */
    match /counters/{counterId} {
        function isSignedIn() {
            return request.auth != null;
        }
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }
  }
}