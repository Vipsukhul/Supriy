/**
 * @fileoverview Firestore Security Rules for DebtFlow application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles,
 * allows public read access to customer and financial record data, but restricts
 * write access to those entities.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the
 *   authenticated user with the matching UID.
 * - /customers/{customerId}: Stores customer information. Read access is public,
 *   but write access is restricted.
 * - /financialRecords/{recordId}: Stores financial records. Read access is
 *   public, but write access is restricted.
 *
 * Key Security Decisions:
 * - User profiles are strictly private and only accessible to the owning user.
 * - Customer and financial record data are publicly readable, enabling broad access.
 * - Write access to customer and financial record data is disabled in this prototype.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     * @allow (get) User with UID 'user123' can read their profile.
     * @allow (update) User with UID 'user123' can update their profile.
     * @allow (delete) User with UID 'user123' can delete their profile.
     * @deny (create) User with UID 'user456' cannot create a profile for 'user123'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to customer documents. Read access is public, write access is denied.
     * @path /customers/{customerId}
     * @allow (get) Any user can read customer data.
     * @allow (list) Any user can list customer data.
     * @deny (create) No user can create customer data.
     * @deny (update) No user can update customer data.
     * @deny (delete) No user can delete customer data.
     * @principle Allows public read access to customer data, restricts all write access.
     */
    match /customers/{customerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to financial record documents. Read access is public, write access is denied.
     * @path /financialRecords/{recordId}
     * @allow (get) Any user can read financial record data.
     * @allow (list) Any user can list financial record data.
     * @deny (create) No user can create financial record data.
     * @deny (update) No user can update financial record data.
     * @deny (delete) No user can delete financial record data.
     * @principle Allows public read access to financial record data, restricts all write access.
     */
    match /financialRecords/{recordId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}