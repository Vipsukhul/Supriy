/**
 * @file Firestore Security Rules for DebtFlow application.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model. Each user can only
 *                read and write their own data stored under their unique user ID.
 *
 * @data_structure All user data is stored in the `/users/{userId}` collection, where
 *                 `{userId}` corresponds to the Firebase Authentication UID.
 *
 * @key_security_decisions
 *   - User listing is disallowed to protect user privacy.
 *   - Write access is strictly limited to the authenticated user owning the document.
 *   - Data consistency between the path and document ID is enforced on creation and updates.
 *
 * @denormalization_for_authorization Not applicable in this simple user-based structure.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for documents in the /users/{userId} collection.
     *              Each user can only read and write their own document.
     * @path /users/{userId}
     * @allow (create) User 'user_abc' with id 'user_abc' can create their own document.
     * @allow (get) User 'user_abc' can read their own document.
     * @allow (update) User 'user_abc' can update their own document.
     * @allow (delete) User 'user_abc' can delete their own document.
     * @deny (create) User 'user_abc' cannot create a document with id 'user_xyz'.
     * @deny (get) User 'user_abc' cannot read document 'user_xyz'.
     * @deny (update) User 'user_abc' cannot update document 'user_xyz'.
     * @deny (delete) User 'user_abc' cannot delete document 'user_xyz'.
     * @principle Enforces document ownership for all operations. Validates relational integrity
     *            between the path and the document's `id` field.
     */
    match /users/{userId} {
      allow get: if false;
      allow list: if false;

      match /{documentId} {
        // Helper function to check if the user is signed in
        function isSignedIn() {
          return request.auth != null;
        }

        // Helper function to check if the authenticated user is the owner of the resource.
        function isOwner(userId) {
          return request.auth.uid == userId;
        }

        // Helper function to check if the authenticated user is the existing owner of the resource.
        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

        allow get: if isOwner(userId);

        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
      }
    }
  }
}