/**
 * @fileoverview Firestore Security Rules for DebtFlow application.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model. User data is strictly controlled by the user.
 * Customer and Financial Record data is publicly readable but only writable by authorized users (Admin).
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the authenticated user.
 * - /customers/{customerId}: Stores customer information, publicly readable, writable only by authorized users.
 * - /financialRecords/{recordId}: Stores financial records, publicly readable, writable only by authorized users.
 *
 * Key Security Decisions:
 * - User listing is forbidden to protect user privacy.
 * - Role-based access control is used for administrative operations.
 *
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - User with matching UID can create their own profile.
     * @allow (get, list, update, delete) - User with matching UID can access their own profile.
     * @deny (create) - User cannot create a profile with a mismatched UID.
     * @deny (get, list, update, delete) - User cannot access another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get, update, delete: if isSignedIn() && isOwner(userId) && resource != null;
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
    }

    /**
     * @description Controls access to customer data.
     * @path /customers/{customerId}
     * @allow (get, list) - Any user can read customer data.
     * @allow (create, update, delete) - Only admin users can modify customer data.
     * @deny (create, update, delete) - Non-admin users cannot modify customer data.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /customers/{customerId} {
      function isAdmin() {
        return request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to financial record data.
     * @path /financialRecords/{recordId}
     * @allow (get, list) - Any user can read financial record data.
     * @allow (create, update, delete) - Only admin users can modify financial record data.
     * @deny (create, update, delete) - Non-admin users cannot modify financial record data.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /financialRecords/{recordId} {
      function isAdmin() {
        return request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

      allow get, list: if true;
      allow create, update, delete: if isAdmin() && resource != null;
    }
  }
}