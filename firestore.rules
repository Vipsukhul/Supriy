rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Allows a user to create their own profile if the UID matches.
     * @allow (get, update, delete) Allows a user to read, update, or delete their own profile.
     * @deny (create) Denies creation if the UID does not match the authenticated user.
     * @deny (get, update, delete) Denies access if the UID does not match the authenticated user or the document doesn't exist.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to customer documents.
     * @path /customers/{customerId}
     * @allow (get, list) Allows anyone to read customer data.
     * @deny (create, update, delete) Denies anyone to write customer data.
     * @principle Allows public read access with restricted write access.
     */
    match /customers/{customerId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add authorization for creating/updating customer data
    }

    /**
     * @description Controls access to financial record documents.
     * @path /financialRecords/{recordId}
     * @allow (get, list) Allows anyone to read financial record data.
     * @deny (create, update, delete) Denies anyone to write financial record data.
     * @principle Allows public read access with restricted write access.
     */
    match /financialRecords/{recordId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add authorization for creating/updating financial record data
    }

    /**
     * @description Controls access to the users counter document.
     * @path /counters/users
     * @deny (get, list, create, update, delete) Denies all access to the counter document for now.
     */
    match /counters/{counterId} {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}